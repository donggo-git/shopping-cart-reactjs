[{"C:\\project\\reciept-app\\src\\index.js":"1","C:\\project\\reciept-app\\src\\reportWebVitals.js":"2","C:\\project\\reciept-app\\src\\App.js":"3","C:\\project\\reciept-app\\src\\source.js":"4","C:\\project\\reciept-app\\src\\cart.js":"5","C:\\project\\reciept-app\\src\\product.js":"6","C:\\project\\reciept-app\\src\\productItems.js":"7","C:\\project\\reciept-app\\src\\payment-plan.js":"8"},{"size":501,"mtime":1609912791009,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":2851,"mtime":1609954274617,"results":"12","hashOfConfig":"10"},{"size":2796,"mtime":1608836975389,"results":"13","hashOfConfig":"10"},{"size":5217,"mtime":1609954512208,"results":"14","hashOfConfig":"10"},{"size":6831,"mtime":1609453012957,"results":"15","hashOfConfig":"10"},{"size":1446,"mtime":1609453043968,"results":"16","hashOfConfig":"10"},{"size":1060,"mtime":1609039748679,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mop9w6",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\project\\reciept-app\\src\\index.js",[],"C:\\project\\reciept-app\\src\\reportWebVitals.js",[],["36","37"],"C:\\project\\reciept-app\\src\\App.js",[],"C:\\project\\reciept-app\\src\\source.js",[],"C:\\project\\reciept-app\\src\\cart.js",[],"C:\\project\\reciept-app\\src\\product.js",["38"],"import React from 'react';\r\nimport { MdShoppingCart } from 'react-icons/md';\r\nimport Grid_item from \"./productItems\";\r\nclass Product extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            brand: 'all',\r\n            love: false,\r\n            styles: {\r\n                border: 'none',\r\n                backgroundColor: 'rgb(252, 198, 52)'\r\n            },\r\n            color: [\r\n                {\r\n                    color: 'red',\r\n                    value: false\r\n                },\r\n                {\r\n                    color: 'black',\r\n                    value: false,\r\n                },\r\n                {\r\n                    color: 'white',\r\n                    value: false\r\n                },\r\n                {\r\n                    color: 'blue',\r\n                    value: false\r\n                }\r\n            ],\r\n\r\n        }\r\n    }\r\n    render() {\r\n\r\n        var Apple = 'Apple';\r\n        var Samsung = 'Samsung';\r\n        let products = this.props.product;\r\n        const getProductByFilter = () => {\r\n            //if select is 'all'\r\n            if (this.state.brand === 'all') {\r\n                if (this.state.color.every(cl => cl.value === false)) {\r\n                    if (this.state.love) { return products.filter(product => getLoveItem(product)); }\r\n                    else {\r\n                        return products;\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.state.love) { return products.filter(product => getLoveItem(product) && getProductByColor(product)); }\r\n                    else { return products.filter(product => getProductByColor(product)) }\r\n                }\r\n            }\r\n            else {\r\n                if (this.state.color.every(cl => cl.value === false)) {\r\n                    if (this.state.love) { return products.filter(product => getLoveItem(product) && getProductByBrand(product)); }\r\n                    else {\r\n                        return products.filter(product => getProductByBrand(product));\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.state.love) { return products.filter(product => getLoveItem(product) && getProductByBrand(product) && getProductByColor(product)); }\r\n                    else { return products.filter(product => getProductByBrand(product) && getProductByColor(product)) }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        const getProductByBrand = (e) => {\r\n            return e.brand === this.state.brand\r\n        }\r\n        const setBrand = (e) => {\r\n            this.setState({\r\n                brand: e.target.value\r\n            })\r\n        }\r\n        const setLoved = () => {\r\n            this.setState((pre) => ({\r\n                love: !pre.love\r\n            }))\r\n            if (this.state.love === false) {\r\n                this.setState({ styles: { border: '1.5px solid  rgb(252, 198, 52)', backgroundColor: '#ffffff', } })\r\n            }\r\n            else {\r\n                this.setState({ styles: { border: 'none', backgroundColor: 'rgb(252, 198, 52)' } })\r\n            }\r\n        }\r\n        const getLoveItem = (e) => {\r\n\r\n            return e.loved === this.state.love;\r\n\r\n        }\r\n        const setColor = (e) => {\r\n            let newColor = [...this.state.color];\r\n            let findColor = newColor.find(colorTarget => colorTarget.color === e)\r\n            findColor.value = !findColor.value;\r\n            this.setState({\r\n                color: newColor\r\n            })\r\n\r\n        }\r\n        const getProductByColor = (e) => {\r\n            //let colorNeed = product.color;\r\n            let colorAvailable = [...this.state.color].filter(color => color.value === true);\r\n            let arr = colorAvailable.map(obj => Object.values(obj).filter(need => typeof need != 'boolean').join(''));\r\n            return arr.indexOf(e.color) > -1;\r\n\r\n        }\r\n        return (\r\n\r\n            <div className=\"product-page\">\r\n\r\n                {console.log(this.state.brand)}\r\n                <h1 >Shopping</h1>\r\n                <div className='filter-form'>\r\n                    <select className='select' onChange={(e) => setBrand(e)}>\r\n                        <option value='all'>All</option>\r\n                        <option value={Apple}>{Apple}</option>\r\n                        <option value={Samsung}>{Samsung}</option>\r\n                    </select>\r\n                    <div className='checkbox-list'>\r\n                        <label className=\"checkbox-container red\">\r\n                            <input type=\"checkbox\" name=\"color\" value=\"red\" onChange={(e) => setColor(e.target.value)} />\r\n                            <span className='checkmark' id=\"red\"></span>\r\n                        </label>\r\n                        <label className=\"checkbox-container black\">\r\n                            <input type=\"checkbox\" name=\"color\" value=\"black\" onChange={(e) => setColor(e.target.value)} />\r\n                            <span className='checkmark' id=\"black\"></span>\r\n                        </label>\r\n                        <label className=\"checkbox-container white\">\r\n                            <input type=\"checkbox\" name=\"color\" value=\"white\" onChange={(e) => setColor(e.target.value)} />\r\n                            <span className='checkmark' id=\"white\"></span>\r\n                        </label>\r\n                        <label className=\"checkbox-container blue\">\r\n                            <input type=\"checkbox\" name=\"color\" value=\"blue\" onChange={(e) => setColor(e.target.value)} />\r\n                            <span className='checkmark' id=\"blue\"></span>\r\n                        </label>\r\n                    </div>\r\n                    <button style={this.state.styles} onClick={() => setLoved()}\r\n                        className=\"love-btn\">loved items</button>\r\n                </div>\r\n                <div className='grid'>\r\n\r\n                    {\r\n                        getProductByFilter().map((product, index) => (\r\n                            <Grid_item\r\n                                product={product} index={index} img={product.img} name={product.name}\r\n                                price={product.price}\r\n                                set_love={this.props.set_love}\r\n                                addToCart={this.props.addToCart}\r\n                                love={this.state.love}\r\n                                key={product.id} />\r\n\r\n                        ))\r\n                    }\r\n                </div>\r\n                <button onClick={() => this.props.ChangePage()} className=\"changePage-btn\">\r\n                    <span className=\"changePageQuantity\">{this.props.totalQuantity}</span>\r\n                    <MdShoppingCart /></button>\r\n            </div>)\r\n    }\r\n}\r\nexport default Product","C:\\project\\reciept-app\\src\\productItems.js",[],"C:\\project\\reciept-app\\src\\payment-plan.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":146,"column":29,"nodeType":"45","endLine":152,"endColumn":52},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react/jsx-pascal-case","Imported JSX component Grid_item must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-global-assign","no-unsafe-negation"]